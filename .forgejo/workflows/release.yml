name: release

on:
  workflow_dispatch:
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]


jobs:
  build-release:
    runs-on: codeberg-tiny
    container: ${{ matrix.info.container }}
    name: ${{ matrix.info.name }}
    env:
      CARGO_TERM_COLOR: always
      CARGO: cargo
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        info:
          - build: linux
            container: archlinux:latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            name: x86_64-linux-gnu
          - build: linux-musl
            container: archlinux:latest
            rust: stable
            target: x86_64-unknown-linux-musl
            name: x86_64-linux-musl
          - build: linux-aarch64
            container: archlinux:latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            name: aarch64-linux-gnu
          - build: linux-musl-aarch64
            container: archlinux:latest
            rust: stable
            target: aarch64-unknown-linux-musl
            name: aarch64-linux-gnu-musl

    steps:
      - name: Create resolv.conf
        run: |
          set -ex
          echo 'nameserver 1.1.1.1' >/etc/resolv.conf
          echo 'nameserver 1.1.0.0' >>/etc/resolv.conf

      - name: Install dependencies
        run: | 
          pacman --noconfirm -Syu && pacman --needed --noconfirm -S base-devel cmake ninja curl jq nodejs git rust-aarch64-gnu rust-aarch64-musl

      - name: Checkout code
        uses: https://code.forgejo.org/actions/checkout@v5

      - name: Setup rust toolchain
        uses: https://code.forgejo.org/theoparis/rust-toolchain@master
        with:
          toolchain: ${{ matrix.info.rust }}
          targets: ${{ matrix.info.target }}

      - name: Rust version
        run: rustc --version
      
      - name: Toolchain Active
        run: |
          rustup toolchain list
          echo ${{ matrix.info.target }}

      - name: Build Releases Binary to all Target
        run:
          ${{ env.CARGO }} build --release --target ${{ matrix.info.target }} 

      - name: List Release Target
        run: | 
          ls -la target/
          ls -la target/${{ matrix.info.target }}/release


      # - name: Build release binary
      #   shell: bash
      #   run: |
      #     pwd
      #     ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
      #     if [ "${{ matrix.os }}" = "windows-latest" ]; then
      #     bin="target/${{ matrix.target }}/release/paperpass.exe"
      #     else
      #     bin="target/${{ matrix.target }}/release/paperpass"
      #     fi
      #     echo "BIN=$bin" >> $FORGEJO_ENV
      #
      # - name: Strip release binary (cross)
      #   if: env.CARGO == 'cross'
      #   shell: bash
      #   run: |
      #     docker run --rm -v \
      #     "$PWD/target:/target:Z" \
      #     "ghcr.io/cross-rs/${{ matrix.target }}:main" \
      #     "${{ matrix.strip }}" \
      #     "/$BIN"
      #
      # - name: Determine archive name
      #   shell: bash
      #   run: |
      #     version="${{ needs.create-release.outputs.version }}"
      #     echo "ARCHIVE=paperpass-$version-${{ matrix.name }}" >> $FORGEJO_ENV
      #
      # - name: Creating directory for archive
      #   shell: bash
      #   run: |
      #     mkdir -p "$ARCHIVE"
      #     # mkdir -p "$ARCHIVE"/{qrcode,stegano}
      #     cp "$BIN" "$ARCHIVE"/
      #
      # - name: Build archive (Unix)
      #   shell: bash
      #   if: matrix.os != 'windows-latest'
      #   run: |
      #     tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
      #     shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
      #     echo "ASSET=$ARCHIVE.tar.gz" >> $FORGEJO_ENV
      #     echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $FORGEJO_ENV
      #
      # - name: Create Draft release
      #   uses: https://code.forgejo.org/actions/forgejo-release@v2.7.2
      #   with:
      #     direction: upload
      #     hide-archive-link: true
      #     repo: rigel254/paperpass
      #     release-dir: ${{ env.TARGET_DIR }}

      # - name: Upload release archive
      #   env:
      #     FORGEJO_TOKEN: ${{ secrets.FORGEJO_TOKEN }}
      #   shell: bash
      #   run: |
      #     version="${{ needs.create-release.outputs.version }}"
      #     gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}
      #
